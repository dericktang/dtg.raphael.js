/*! * dtg.raphael.js ~ Copyright (c) 2014 dericktang, https://github.com/dericktang/dtg.raphael.js * Released under MIT license */(function (window) {var SVGSTR={      //加号      PLUS:"M25.979,12.896 19.312,12.896 19.312,6.229 12.647,6.229 12.647,12.896 5.979,12.896 5.979,19.562 12.647,19.562 12.647,26.229 19.312,26.229 19.312,19.562 25.979,19.562z",      //减号      MINUS:"M25.979,12.896,5.979,12.896,5.979,19.562,25.979,19.562z",      STYLE:{                SILDERBAR:{                         "fill":"#fff",                         "stroke":"#fff",                         "opacity":"0.8"                     },                  SILDERBTN:{                         "fill":"#F97243",                         "stroke":"#F97243",                         "opacity":"0.8"                     },           } };var dtgUtils={};   var utils =(function () {      var touch = {};	  touch.move = function(dx, dy, x, y, e){	    dx=dx*this.options.zoom;		dy=dy*this.options.zoom;	    if(!this.isDrag){					   this._startPostion=[(this._lastPostion[0]+dx),this._lastPostion[1]+dy];		}		this._lastPostion=[(this._startPostion[0]+dx),this._startPostion[1]+dy];		this.isDrag = true;				transformLayoutDraw(this);		//移动的时候还原缩放大小，确定的时候再缩放	  };	  touch.start = function(x, y, e){		this.isDrag = false;	  };	  touch.up = function(){	    this.isDrag = false;	  };	  touch.small =function(e){	   var obj = this.data("obj");	     if(obj.options.zoom>=obj.options.begin && obj.options.zoom<=obj.options.end ){		   obj.options.zoom=obj.options.zoom-0.05;		   if(obj.options.zoom<obj.options.begin){//到最大了			   obj.options.zoom=obj.options.begin;		   }		   transformLayout(obj);		}	  };	  touch.big =function(e){		var obj = this.data("obj");	     if(obj.options.zoom>=obj.options.begin && obj.options.zoom<=obj.options.end ){		   obj.options.zoom=obj.options.zoom+0.05;		   if(obj.options.zoom>obj.options.end){//到最大了			   obj.options.zoom=obj.options.end;		   }            transformLayout(obj);		 }	  };	  touch.zoom =function(obj){          transformLayout(obj);	  };      touch.comehere=function(e){          var touch = e.targetTouches[0];		  var obj = this.data("obj");	      var pgY = touch.pageY;		  var realPageY = pgY- $("#treescroll").offset().top+30;			 		var resultObj={x1:obj._startPostion,x2:obj.endPostion,px:realPageY-dtgUtils.zoomBtnWidth(obj.options.width),r1:obj.options.begin,r2:obj.options.end};		 var result = dtgUtils.silderResult(resultObj);		 obj.context.zoom = dtgUtils.silderResultChange(obj.options.begin,obj.options.end,result);				      };	  touch.init = function(obj){//初始化画布	             transformLayout(obj);	  }	  function transformLayout(obj){	      obj.ctx._layoutTmp.transform("t" + obj.ctx._lastPostion[0] + "," + obj.ctx._lastPostion[1]+"s"+obj.options.zoom+","+obj.options.zoom+"," + obj.ctx._lastPostion[0] + "," + obj.ctx._lastPostion[1]);          var postion={y1:obj.range[0],y2:obj.range[1],z1:obj.options.begin,zn:obj.options.zoom,z2:obj.options.end};          var endY=dtgUtils.getYn(postion);          animateEnd(endY,obj);	  };	  function transformLayoutDraw(obj){	      obj._layoutTmp.transform("t" + obj._lastPostion[0] + "," + obj._lastPostion[1]+"s"+obj.options.zoom+","+obj.options.zoom+"," + obj._lastPostion[0] + "," + obj._lastPostion[1]);	  };	  function transformLayoutDrawDown(obj){	      obj._layoutTmp.transform("t" + obj._lastPostion[0] + "," + obj._lastPostion[1]+"s"+obj.options.zoom+","+obj.options.zoom+"," + obj._lastPostion[0] + "," + obj._lastPostion[1]);	  };	  function animateEnd(endY,obj){          obj.silderBtn.animate({		        y: endY,		    },1000);		  obj.silderBtn.y = endY;	  }	  return touch;   })();   (function(dtgUtils){    //obj={y1:y1,yn:yn,y2,y2,z1:z1,zn:zn,z2:z2}        dtgUtils.getZoom=function(obj){        var y1=obj.y1;        var yn=obj.yn;        var y2=obj.y2;        var z1=obj.z1;        var zn=obj.zn;        var z2=obj.z2;        return ((z1-z2)*(yn-y1))/(y2-y1)+z2;     }     dtgUtils.getYn=function(obj){        var y1=obj.y1;        var yn=obj.yn;        var y2=obj.y2;        var z1=obj.z1;        var zn=obj.zn;        var z2=obj.z2;        return ((y2-y1)*(zn-z2))/(z1-z2)+y1;     }})(dtgUtils);   function DtgRaphael(el,options){	  this.options = {        //常规设置	     width:600,           //画布宽度		 height:500,          //画布高度		 zoom:4,              //放大比例         begin:0.3,  //		end:0.8,    //		 silder:{             //操作条参数	          	  x: 10,       //左边距	          	  y: 10,       //上边距	        	    width:30,   //宽度	        	    height:200, //高度	            }, 	  }     this.options =  $.extend(true,this.options,options);     	  var that=this;	  init(el);	  function init(el){//初始化	     that.paper = Raphael(el, that.options.width, that.options.height);	     that._layoutTmp     = that.paper.set();		 var imgbg = that.paper.rect(0, 0, that.options.width, that.options.height);	     imgbg.attr("fill", "#fff");		 imgbg.attr("opacity", "0.0");		 imgbg.drag(utils.move, utils.start, utils.up,that,that,that);		 that._zoomSilder=new ZoomSilder(that,that.options);	  }   }   DtgRaphael.prototype = {       isDrag : true,	   paper : null,//对外给客户端使用	  _lastPostion:[0,0],	  _startPostion:[0,0],	  _layoutTmp:null,	  _zoomSilder:null,	       bindBtnData : function(data){ //绑定数据，对外给客户端使用		  this._layoutTmp.push(data);		  return this;	  },	  startDrag:function(){ //所以绑定元素增加移动缩放 ，对外给客户端使用		  this._layoutTmp.drag(utils.move, utils.start, utils.up,this,this,this);		  var silder = this._zoomSilder.init();          silder.layout.toFront();		  return this;	  }   }      //画布对象和参数   function ZoomSilder(ctx,options){//操作条对象	  //滑动条的长度,如果在PC上则无需touch事件, options.height-options.width*2	  //放大  (x,y,w,h) -> x y ,w w   	  //滑动条背景      -> x y+w ,w h-w*2   上下距阀值为 w/2	  //滑动条可滑动区域-> x y+w+w/2 ,w h-w*3   上下距阀值为 w/2	  //缩小            -> x y+h-w w w 	  //滑动区域范围 [star,end],用户的参数配置改变而改变	  this.options = options;	  this.ctx     =ctx;      this.layout = ctx.paper.set();	  	  this.range = [options.silder.y+options.silder.width+options.silder.width/2,options.silder.y+options.silder.height-options.silder.width-options.silder.width/2-options.silder.width];	  	  var bigBtn    =  ctx.paper.rect(options.silder.x,options.silder.y,options.silder.width,options.silder.width);      commonSetting(this,bigBtn,utils.big,SVGSTR.STYLE.SILDERBAR);             var path = ctx.paper.svgPath(SVGSTR.PLUS,options.silder.x,options.silder.x,1);      commonSetting(this,path,utils.big,SVGSTR.STYLE.SILDERBTN);	  var silderBg  =  ctx.paper.rect(options.silder.x,options.silder.y+options.silder.width,options.silder.width,options.silder.height-options.silder.width*2);	  silderBg.attr(SVGSTR.STYLE.SILDERBAR);      this.layout.push(silderBg);	  //滑动区域背景	  var silderAble=  ctx.paper.rect(options.silder.x,options.silder.y+options.silder.width+options.silder.width/2,options.silder.width,options.silder.height-options.silder.width*3);	  silderAble.attr(SVGSTR.STYLE.SILDERBAR);      this.layout.push(silderAble);      silderAble.data("obj",this);      silderAble.touchstart(function(e){    	     var touch = e.targetTouches[0];			 var obj = this.data("obj");			 var pgY = (touch.pageY-obj.options.silder.width/2);			 if(obj.range[0]<= pgY && (obj.range[1])>=pgY){				 var postion={y1:obj.range[0],yn:pgY,y2:obj.range[1],z1:obj.options.begin,z2:obj.options.end}    	             obj.options.zoom=dtgUtils.getZoom(postion);	             utils.zoom(obj);	 			 }      });      	  //可滑动区域	  var silderBtn =  ctx.paper.rect(options.silder.x,options.silder.y+options.silder.height/2,options.silder.width,options.silder.width,options.silder.width);;//可拖动的按钮      this.silderBtn=silderBtn;      commonSetting(this,silderBtn,null,SVGSTR.STYLE.SILDERBTN);        silderBtn.drag(function(dx,dy,x,y,e){                  var obj = this.data("obj");                  var newY = y-obj.options.silder.width/2;                  if(obj.range[0]<= newY && (obj.range[1])>=newY){                       this.attr({"y":newY});                       var postion={y1:obj.range[0],yn:newY,y2:obj.range[1],z1:obj.options.begin,z2:obj.options.end}                           obj.options.zoom=dtgUtils.getZoom(postion);                       utils.zoom(obj);                   }                             },function(x,y){              },function(){});      var smallBtn  =  ctx.paper.rect(options.silder.x,options.silder.y+options.silder.height-options.silder.width,options.silder.width,options.silder.width);      commonSetting(this,smallBtn,utils.small,SVGSTR.STYLE.SILDERBAR);            var pathSmall = ctx.paper.svgPath(SVGSTR.MINUS,options.silder.x,options.silder.y+options.silder.height-options.silder.width,1);      commonSetting(this,pathSmall,utils.small,SVGSTR.STYLE.SILDERBTN);            function commonSetting(ctx,obj,click,style){             obj.attr(style);             if(click!=null)             obj.click(click);	         obj.data("obj",ctx);             ctx.layout.push(obj);          }         }      ZoomSilder.prototype = {	    init:function(){		   utils.init(this);            return this;		}	  }      DtgRaphael.utils = utils;    if ( typeof module != 'undefined' && module.exports ) {	    module.exports = DtgRaphael;   } else {    	window.DtgRaphael = DtgRaphael;   }})(window);